# Pipeline de déploiement ARM
trigger:
  branches:
    include:
      - master  # Déclenche le pipeline sur les modifications de la branche principale

pool:
  name: 'Default'  # Utilisation de l'agent auto-hébergé

steps:
- checkout: self  # Cloner le dépôt

# Étape 1 : Création d'une keyVault avec un secret
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)' 
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Variables pour Key Vault
      $resourceGroup = "keyVaultRG"
      $keyVaultName = "TP1CloudkeyVault"

      # Créer le groupe de ressources
      az group create --name $resourceGroup --location "EastUS"

      # Créer le Key Vault
      az keyvault create --name $keyVaultName --resource-group $resourceGroup --location "EastUS"
      
      # Récupérer l'ID du service principal lié à l'authentification de l'abonnement
      $spObjectId = az ad signed-in-user show --query objectId -o tsv
      
      # Donner les permissions d'accès au Key Vault pour gérer les secrets
      az keyvault set-policy --name $keyVaultName --object-id $spObjectId --secret-permissions get list set delete
      
      # Générer un mot de passe aléatoire de 16 caractères
      $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+'
      $password = -join ((1..16) | ForEach-Object { $characters[(Get-Random -Maximum $characters.Length)] })
      
      # Ajouter le mot de passe comme secret dans Key Vault
      az keyvault secret set --vault-name $keyVaultName --name "mpVm" --value $password
  displayName: 'Créer un Key Vault dans Azure et ajouter le mot de passe'

# Étape 2 : Récupérer le mot de passe du Key Vault
- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)' 
    KeyVaultName: 'TP1CloudkeyVault'
    SecretsFilter: 'mpVm'
  displayName: 'Récupérer le mot de passe depuis le Key Vault'

# Étape 3 : Encoder le contenu de cloud-init.txt en base64
- task: PowerShell@2
  displayName: "Encoder le contenu Cloud-Init"
  inputs:
    targetType: 'inline'
    script: |
      # Lire le contenu du fichier cloud-init.txt
      $cloudContent = Get-Content -Path "$(Build.SourcesDirectory)\projet-cloud\vms\cloud-init.txt" -Raw
      # Encoder en base64
      $encodedContent = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($cloudContent))
      # Définir la variable CloudIniContent pour l'étape suivante
      Write-Host "##vso[task.setvariable variable=CloudIniContent;]$encodedContent"

# Étape 4 : Déploiement ARM avec la variable AdminPass et CloudIniContent
- task: AzureResourceManagerTemplateDeployment@3
  displayName: "Déployer le modèle ARM avec paramètres"
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)'  # Remplacez par votre connexion Azure DevOps
    subscriptionId: '40e22e55-8ff0-4611-b9d0-4a8db29b3460'  # Remplacez par votre ID de souscription
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'TP1'
    location: 'East US'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)\projet-cloud\vms\azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)\projet-cloud\vms\azuredeploy.parameters.json'
    overrideParameters: '-customData "$(CloudIniContent)" -adminPassword "$(mpVm)"'
    deploymentMode: 'Incremental'
