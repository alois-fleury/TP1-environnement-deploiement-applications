# Pipeline de déploiement ARM
trigger:
  branches:
    include:
      - master  # Déclenche le pipeline sur les modifications de la branche principale

pool:
  name: 'Default'  # Utilisation de l'agent auto-hébergé

steps:
- checkout: self  # Cloner le dépôt

# Étape 1 : Création d'une Key Vault avec un secret
# Vérifiez les permissions en boucle jusqu'à ce que l'accès soit confirmé
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Boucle pour vérifier les permissions (maximum 5 minutes)
      $maxAttempts = 10
      $attempt = 0
      $permissionsGranted = $false

      while (-not $permissionsGranted -and $attempt -lt $maxAttempts) {
          try {
              # Tenter de créer un secret de test pour vérifier les permissions
              az keyvault secret set --vault-name $keyVaultName --name "testPermissionCheck" --value "testValue" | Out-Null
              $permissionsGranted = $true
          } catch {
              Write-Host "Les permissions ne sont pas encore propagées. Tentative $($attempt + 1)/$maxAttempts. Attente de 30 secondes..."
              Start-Sleep -Seconds 30
              $attempt++
          }
      }

      if (-not $permissionsGranted) {
          throw "Les permissions RBAC n'ont pas été propagées après 5 minutes. Vérifiez la configuration."
      }

      # Si les permissions sont en place, créer le mot de passe réel
      $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+'
      $password = -join ((1..16) | ForEach-Object { $characters[(Get-Random -Maximum $characters.Length)] })
      
      az keyvault secret set --vault-name $keyVaultName --name "mpVm" --value $password
  
  displayName: 'Créer un Key Vault dans Azure et ajouter le mot de passe après vérification des permissions'


# Étape 2 : Encoder le contenu de cloud-init.txt en base64
- task: PowerShell@2
  displayName: "Encoder le contenu Cloud-Init"
  inputs:
    targetType: 'inline'
    script: |
      # Lire le contenu du fichier cloud-init.txt
      $cloudContent = Get-Content -Path "$(Build.SourcesDirectory)\projet-cloud\vms\cloud-init.txt" -Raw
      # Encoder en base64
      $encodedContent = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($cloudContent))
      # Définir la variable CloudIniContent pour l'étape suivante
      Write-Host "##vso[task.setvariable variable=CloudIniContent;]$encodedContent"

# Étape 3 : Déploiement ARM avec la variable AdminPass et CloudIniContent
- task: AzureResourceManagerTemplateDeployment@3
  displayName: "Déployer le modèle ARM avec paramètres"
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)'  # Remplacez par votre connexion Azure DevOps
    subscriptionId: '40e22e55-8ff0-4611-b9d0-4a8db29b3460'  # Remplacez par votre ID de souscription
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'TP1'
    location: 'East US'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)\projet-cloud\vms\azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)\projet-cloud\vms\azuredeploy.parameters.json'
    overrideParameters: '-customData "$(CloudIniContent)" -adminPassword "$(mpVm)"'
    deploymentMode: 'Incremental'
