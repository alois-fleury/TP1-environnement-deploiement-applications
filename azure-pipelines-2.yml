# Azure DevOps YAML Pipeline pour créer un Key Vault et gérer les permissions avec RBAC
trigger:
  branches:
    include:
      - master

pool:
  name: 'Default'

steps:
- checkout: self

# Étape 1 : Création d'un Key Vault avec RBAC activé
- task: AzureCLI@2
  inputs:
    azureSubscription: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Variables pour Key Vault et le groupe de ressources
      $resourceGroup = "keyVaultRG"
      $keyVaultName = "TP1CloudkeyVault"
      $servicePrincipalObjectId = "$(AZURE_CLIENT_ID)"

      # Vérification si le groupe de ressources existe ou est en cours de suppression
      $existingGroup = az group show --name $resourceGroup --query "provisioningState" -o tsv 2>$null
      if ($existingGroup -eq "Deleting" -or $existingGroup -eq "Failed") {
        az group delete --name $resourceGroup --yes --no-wait
        Start-Sleep -Seconds 60
      }

      # Créez le groupe de ressources si nécessaire
      if (-not $existingGroup) {
        az group create --name $resourceGroup --location "EastUS"
      }

      # Créez le Key Vault avec l'option RBAC activée
      az keyvault create --name $keyVaultName --resource-group $resourceGroup --location "EastUS" --enable-rbac-authorization

      # Attendre que le Key Vault soit entièrement disponible
      Start-Sleep -Seconds 15

      # Attribuer le rôle Key Vault Secrets User au Service Principal
      az role assignment create --role "Key Vault Secrets User" --assignee-object-id $servicePrincipalObjectId --assignee-principal-type ServicePrincipal --scope "/subscriptions/40e22e55-8ff0-4611-b9d0-4a8db29b3460/resourceGroups/$resourceGroup/providers/Microsoft.KeyVault/vaults/$keyVaultName"

      # Attendre la propagation des permissions RBAC (peut prendre quelques minutes)
      Start-Sleep -Seconds 120

      # Générer un mot de passe aléatoire
      $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+'
      $password = -join ((1..16) | ForEach-Object { $characters[(Get-Random -Maximum $characters.Length)] })

      # Ajouter le mot de passe comme secret dans Key Vault
      az keyvault secret set --vault-name $keyVaultName --name "mpVm" --value $password
  displayName: 'Créer un Key Vault dans Azure et ajouter le mot de passe avec RBAC'



# Étape 2 : Récupérer le mot de passe du Key Vault
#- task: AzureKeyVault@2
#  inputs:
#    azureSubscription: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)' 
#    KeyVaultName: 'TP1CloudkeyVault'
#    SecretsFilter: 'mpVm'
#  displayName: 'Récupérer le mot de passe depuis le Key Vault'

# Étape 3 : Encoder le contenu de cloud-init.txt en base64
- task: PowerShell@2
  displayName: "Encoder le contenu Cloud-Init"
  inputs:
    targetType: 'inline'
    script: |
      # Lire le contenu du fichier cloud-init.txt
      $cloudContent = Get-Content -Path "$(Build.SourcesDirectory)\projet-cloud\vms\cloud-init.txt" -Raw
      # Encoder en base64
      $encodedContent = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($cloudContent))
      # Définir la variable CloudIniContent pour l'étape suivante
      Write-Host "##vso[task.setvariable variable=CloudIniContent;]$encodedContent"

# Étape 4 : Déploiement ARM avec la variable AdminPass et CloudIniContent
- task: AzureResourceManagerTemplateDeployment@3
  displayName: "Déployer le modèle ARM avec paramètres"
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'Azure subscription 1(40e22e55-8ff0-4611-b9d0-4a8db29b3460)'  # Remplacez par votre connexion Azure DevOps
    subscriptionId: '40e22e55-8ff0-4611-b9d0-4a8db29b3460'  # Remplacez par votre ID de souscription
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'TP1'
    location: 'East US'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)\projet-cloud\vms\azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)\projet-cloud\vms\azuredeploy.parameters.json'
    overrideParameters: '-customData "$(CloudIniContent)" -adminPassword "$(mpVm)"'
    deploymentMode: 'Incremental'
