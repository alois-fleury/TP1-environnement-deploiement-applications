# Pipeline de déploiement ARM avec PowerShell Az
trigger:
  branches:
    include:
      - master  # Déclenche la pipeline sur les modifications de la branche principale

pool:
  name: 'Default'  # Utilisation de l'agent auto-hébergé

variables:
  - group: adminVM  # Utilise le groupe de variables adminVM pour injecter adminUsername et adminPassword

steps:
- checkout: self  # Cloner le dépôt

# Étape 1 : Installer le module Az si non présent
- task: PowerShell@2
  displayName: 'Installer le module PowerShell Az'
  inputs:
    targetType: 'inline'
    script: |
      if (-not (Get-Module -ListAvailable -Name Az)) {
          Install-Module -Name Az -AllowClobber -Scope CurrentUser -Force
      }
      Import-Module Az
      Write-Output "Module Az installé et importé."

# Étape 2 : Connexion à Azure
- task: PowerShell@2
  displayName: 'Connexion à Azure avec PowerShell Az'
  inputs:
    targetType: 'inline'
    script: |
      Connect-AzAccount -ServicePrincipal -TenantId $(AZURE_TENANT_ID) -Credential (New-Object System.Management.Automation.PSCredential -ArgumentList $(AZURE_CLIENT_ID), (ConvertTo-SecureString -String $(AZURE_CLIENT_SECRET) -AsPlainText -Force))
      Set-AzContext -SubscriptionId $(AZURE_SUBSCRIPTION_ID)

# Étape 3 : Lister les fichiers dans projet-cloud/vms pour vérifier la présence des fichiers ARM
- task: PowerShell@2
  displayName: 'Lister les fichiers dans projet-cloud/vms'
  inputs:
    targetType: 'inline'
    script: |
      Write-Output "Contenu du répertoire $(System.DefaultWorkingDirectory)\projet-cloud\vms :"
      Get-ChildItem -Path "$(System.DefaultWorkingDirectory)\projet-cloud\vms" -Recurse

# Étape 4 : Déployer le modèle ARM avec PowerShell Az
- task: PowerShell@2
  displayName: 'Déploiement ARM avec PowerShell Az'
  inputs:
    targetType: 'inline'
    script: |
      # Définir les chemins complets des fichiers
      $templateFile = "$(System.DefaultWorkingDirectory)\projet-cloud\vms\azuredeploy.json"
      $parametersFile = "$(System.DefaultWorkingDirectory)\projet-cloud\vms\azuredeploy.parameters.json"

      # Vérifier l'existence du fichier de modèle
      if (Test-Path -Path $templateFile) {
          Write-Output "Fichier de modèle ARM trouvé : $templateFile"
      } else {
          Write-Output "Erreur : Fichier de modèle ARM introuvable : $templateFile"
          exit 1
      }

      # Vérifier l'existence du fichier de paramètres
      if (Test-Path -Path $parametersFile) {
          Write-Output "Fichier de paramètres ARM trouvé : $parametersFile"
      } else {
          Write-Output "Erreur : Fichier de paramètres ARM introuvable : $parametersFile"
          exit 1
      }

      # Lire et préparer les paramètres
      $parameters = @{
          adminUsername = "azureAdmin"
          adminPassword = $(adminPassword)  # Assurez-vous que le mot de passe est stocké de manière sécurisée
          virtualMachineScaleSetName = "myVMSS"
          vmName = "myVM"
      }

      # Exécution de la commande de déploiement ARM avec New-AzResourceGroupDeployment
      Write-Output "Début du déploiement ARM..."
      try {
          New-AzResourceGroupDeployment -ResourceGroupName "TP1" `
                                        -TemplateFile $templateFile `
                                        -TemplateParameterFile $parametersFile `
                                        -adminUsername $parameters.adminUsername `
                                        -adminPassword (ConvertTo-SecureString -String $parameters.adminPassword -AsPlainText -Force) `
                                        -virtualMachineScaleSetName $parameters.virtualMachineScaleSetName `
                                        -vmName $parameters.vmName `
                                        -Verbose
      } catch {
          Write-Output "Erreur pendant le déploiement ARM :"
          Write-Output $_.Exception.Message
          exit 1
      }
